/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
//
// Genome preparation options
//

process {
    withName: 'GUNZIP_.*|MAKE_TRANSCRIPTS_FASTA' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }

    withName: 'UNTAR_.*|STAR_GENOMEGENERATE|STAR_GENOMEGENERATE_IGENOMES|HISAT2_BUILD' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }


    withName: 'CAT_FASTQ' {
        publishDir = [
            path: { "${params.outdir}/fastq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_merged_fastq
        ]
    }
    withName: 'SALMON_INDEX' {
        ext.args   = params.gencode ? '--gencode' : ''
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }    
}

if (!params.skip_bbsplit && params.bbsplit_fasta_list) {
    process {
        withName: '.*:PREPARE_GENOME:BBMAP_BBSPLIT' {
            ext.args   = 'build=1'
            publishDir = [
                path: { "${params.outdir}/genome/index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}
//
// Read QC and trimming options
//

if (!(params.skip_fastqc || params.skip_qc)) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
            ext.args   = {
                [
                    "--fastqc_args '-t ${task.cpus}' ",
                    params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
                ].join(' ').trim()
            }
            publishDir = [
                [
                    path: { "${params.outdir}/trimgalore/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ]
            ]
        }


    }
}
if (params.with_umi && !params.skip_umi_extract) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
            ext.args   = [
                    params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                    params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                    params.umitools_bc_pattern2    ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : ''
                ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    enabled: params.save_umi_intermeds
                ]
            ]
        }
    }
}
//
// Contaminant removal options
//

if (!params.skip_bbsplit) {
    process {
        withName: 'BBMAP_BBSPLIT' {
            ext.args   = 'build=1 ambiguous2=all maxindel=150000'
            publishDir = [
                [
                    path: { "${params.outdir}/bbsplit" },
                    mode: params.publish_dir_mode,
                    pattern: '*.txt'
                ],
                [
                    path: { "${params.outdir}/bbsplit" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    enabled: params.save_bbsplit_reads
                ]
            ]
        }
    }
}

if (params.remove_ribo_rna) {
    process {
        withName: 'SORTMERNA' {
            ext.args   = '--num_alignments 1 --fastx -v'
            publishDir = [
                [
                    path: { "${params.outdir}/sortmerna" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/sortmerna" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    enabled: params.save_non_ribo_reads
                ]
            ]
        }
    }
}

//
// General alignment options
//

if (!params.skip_alignment) {
    process {
        withName: 'MOM:ALIGNASSEMBLY:.*:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.sorted.bam" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'MOM:ALIGNASSEMBLY:.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                enabled: ( ['star_salmon','hisat2','star'].contains(params.aligner) &&
                    ( params.save_align_intermeds ||
                        ( !params.with_umi && params.skip_markduplicates )
                    )
                ) || params.save_align_intermeds || params.skip_markduplicates
            ]
        }

        withName: 'MOM:ALIGNASSEMBLY:.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
            ext.args   = params.bam_csi_index ? '-c' : ''
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,csi}",
                enabled: ( ['star_salmon','hisat2','star'].contains(params.aligner) &&
                    ( params.save_align_intermeds ||
                        ( !params.with_umi && params.skip_markduplicates )
                    )
                ) || params.save_align_intermeds || params.skip_markduplicates
            ]
        }
    }
}




//
// HISAT2 alignment options
//

if (!params.skip_alignment && params.aligner == 'hisat2') {
    process {
        withName: 'MOM:ALIGNASSEMBLY:ALIGN_HISAT2:HISAT2_ALIGN' {
            ext.args   = '--met-stderr --new-summary --dta'
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log'
                ],
                [
                    path: { "${params.outdir}/${params.aligner}" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    enabled: params.save_align_intermeds
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }
    }
}

process {

    // ALIGN_STAR

    withName: STAR_ALIGN {
        ext.args   = [
            '--outSAMtype BAM SortedByCoordinate',
            params.save_unaligned ? '--outReadsUnmapped Fastx' : '',
            params.read_length ? "--sjdbOverhang ${params.read_length - 1}" : '',
            params.star_twopass ? '--twopassMode Basic' : '',
            params.star_bins_bamsort > 0 ? "--outBAMsortingBinsN ${params.star_bins_bamsort}" : ""
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/reports/stats/${meta.id}/STAR_log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: { "${params.outdir}/preprocessing/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: false
            ],
            [
                path: { "${params.outdir}/preprocessing/${meta.id}/unmapped" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }
}

process {

    withName: 'MOM:ALIGNASSEMBLY:ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = {"${meta.id}.aligned"}
        publishDir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            enabled: params.save_align_intermeds
        ]
    }

    withName: 'ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix = {"${meta.id}.aligned"}
        publishDir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}",
            enabled: params.save_align_intermeds
        ]
    }
}





if (!params.skip_stringtie) {
    process {
        withName: 'MOM:ALIGNASSEMBLY:STRINGTIE_STRINGTIE' {
            ext.args   = [
                '-v',
                params.stringtie_ignore_gtf ? '' : '-e'
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/stringtie" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}



if (params.runRank) {
    process {
        withName: 'RANKPROD' {
            ext.args   = [
                params.runRank ? "--runRank ${params.runRank}" : "",
                params.logged ? "--logged ${params.logged}" : "",
                params.logbase ? "--logbase ${params.logbase}" : "",
                params.norm ? "--norm ${params.norm}"  : "",
                (params.wantgenes && params.numgenes) ? "--wantgenes ${params.wantgenes} --numgenes ${params.numgenes}" : "",
                (!params.wantgenes && params.method) ? "--wantgenes ${params.wantgenes} --method ${params.method}" : "",
                params.cutoff ? "--cutoff ${params.cutoff}" : ""
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/${params.outdirRank}/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.proteins) {
    process {
        withName: 'PROTEINS' {
            publishDir = [
                path: { "${params.outdir}/proteins/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.deseq2) {
    process {
        withName: 'DESEQ2' {
            publishDir = [
                path: { "${params.outdir}/deseq2" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.edger) {
    process {
        withName: 'EDGER' {
            if (params.proteins){
                publishDir = [
                path: { "${params.outdir}/edger/proteins" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            }
            if (params.lipids){
                publishDir = [
                path: { "${params.outdir}/edger/lipids" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            }  
            if (params.mirna){
                publishDir = [
                path: { "${params.outdir}/edger/mirna" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            }                      
            else{
                publishDir = [
                path: { "${params.outdir}/edger" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            }
        }
    }
}

if (params.isoforms) {
    process {
        withName: 'ISOPART2' {
            publishDir = [
                path: { "${params.outdir}/isoformspart2" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
if (params.isoforms) {
    process {
        withName: 'ISOVIS' {
            publishDir = [
                path: { "${params.outdir}/isovisual" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.proteins) {
    process {
        withName: 'MOM:PROTEINS:PREPROCESS_MATRIX:MOM_BATCH' {
            publishDir = [
                path: { "${params.outdir}/mcia/proteins" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.lipids) {
    process {
        withName: 'MOM:LIPIDS:PREPROCESS_MATRIX_LIPIDS:MOM_BATCH' {
            publishDir = [
                path: { "${params.outdir}/mcia/lipids" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
/*if (params.genes) {
    process {
        withName: 'MOM:GENES:PREPROCESS_MATRIX:MOM_BATCH' {
            publishDir = [
                path: { "${params.outdir}/mcia/genes" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
if (params.mirna) {
    process {
        withName: 'MOM:MIRNA:PREPROCESS_MATRIX:MOM_BATCH' {
            publishDir = [
                path: { "${params.outdir}/mcia/mirna" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
*/

//
// Salmon pseudo-alignment options
//

if (!params.skip_pseudo_alignment && params.pseudo_aligner == 'salmon') {
    process {
        withName: '.*:QUANTIFY_SALMON_MIRNA:SALMON_QUANT' {
            ext.args   = params.extra_salmon_quant_args ?: ''
            publishDir = [
                path: { "${params.outdir}/salmon_mirna" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('_meta_info.json') ? null : filename }
            ]
        }
        withName: '.*:QUANTIFY_SALMON_ISO:SALMON_QUANT' {
            ext.args   = params.extra_salmon_quant_args ?: ''
            publishDir = [
                path: { "${params.outdir}/salmon_isoforms" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('_meta_info.json') ? null : filename }
            ]
        }        
        withName: '.*:QUANTIFY_SALMON_GENES:SALMON_QUANT' {
            ext.args   = params.extra_salmon_quant_args ?: ''
            publishDir = [
                path: { "${params.outdir}/salmon_genes" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('_meta_info.json') ? null : filename }
            ]
        }        

        withName: '.*:QUANTIFY_SALMON:SALMON_TX2GENE' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:SALMON_TXIMPORT_MIRNA' {
            publishDir = [
                path: { "${params.outdir}/salmon_mirna/tximport_mirna" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }


        withName: '.*:SALMON_TXIMPORT_GENES' {
            publishDir = [
                path: { "${params.outdir}/salmon_genes/tximport_genes" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_SALMON:SALMON_SE_.*' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }


}
